{"version":3,"sources":["assets/Raspi.png","components/HeaderComponent.js","components/FooterComponent.js","helpers/baseUrls.js","components/StationsComponent.js","components/SongComponent.js","components/HomeComponent.js","components/MainComponent.js","redux/ActionCreators.js","redux/ActionTypes.js","components/MainConnector.js","redux/pandora.js","redux/player.js","App.js","redux/configureStore.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","Fragment","Navbar","dark","expand","className","NavbarBrand","href","target","tag","RRNavLink","src","require","width","height","alt","NavbarToggler","onClick","toggleNav","Collapse","isOpen","isNavOpen","navbar","Nav","NavItem","NavLink","to","Footer","SSEUrl","concat","hostname","apiBaseUrl","StationSelect","_ref","stationList","currentStationName","playerRunning","stationsOptions","map","station","value","stationId","label","stationName","Col","md","react_select_browser_esm","find","getCurrentStation","options","onChange","event","command","toString","console","log","fetch","method","then","response","error","onStationChange","SongControls","currentSong","isPaused","buttonList","id","class","icon","rating","fas","far","songPlayed","Math","round","parseInt","songDuration","Media","coverArt","title","bottom","body","heading","artist","Progress","songButton","Button","key","disabled","color","index_es","Home","Main","_useState","useState","_useState2","Object","slicedToArray","setIsNavOpen","_useState3","_useState4","eventSource","setEventSource","eventHandlers","pandora","e","updatePandora","data","player","updatePlayer","useEffect","onopen","onerror","readyState","keys","forEach","eventType","addEventListener","EventSource","close","HeaderComponent","react_router","path","component","exact","isLoading","StationsComponent_StationSelect","SongComponent_SongControls","FooterComponent","addPlayer","type","payload","addPandora","mapStateToProps","state","mapDispatchToProps","dispatch","newPandora","JSON","parse","ActionCreators","newPlayer","MainConnector","withRouter","connect","emptyState","songHistory","Pandora","arguments","length","undefined","action","actionMap","defineProperty","_objectSpread","includes","Player","player_objectSpread","App","es","store","createStore","combineReducers","applyMiddleware","thunk","logger","react_router_dom","Boolean","window","location","match","ReactDOM","render","client_src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.936c5429.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Raspi.8814236b.png\";","import React from 'react';\r\nimport {Nav,NavItem,NavLink,Navbar,NavbarToggler,NavbarBrand,Collapse} from 'reactstrap';\r\nimport {NavLink as RRNavLink} from 'react-router-dom';\r\n\r\nfunction Header(props) {\r\n    return(\r\n        <>\r\n            <Navbar dark expand=\"md\">\r\n                <div className=\"container\">\r\n                    <NavbarBrand className=\"mr-auto\" href=\"/\" target=\"_blank\" tag={RRNavLink}>\r\n                        <img src={require('../assets/Raspi.png')} width=\"40\" height=\"35\" alt=\"\" /> \r\n                    </NavbarBrand>\r\n                    <NavbarToggler onClick={props.toggleNav} />\r\n                    <Collapse isOpen={props.isNavOpen} navbar>\r\n                        <Nav navbar>\r\n                            <NavItem>\r\n                                <NavLink tag={RRNavLink} className=\"nav-link\" to=\"/home\">Home</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink tag={RRNavLink} className=\"nav-link\" to=\"/pandora\">Pandora</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink tag={RRNavLink} className=\"nav-link\" to=\"/iheartradio\">I-Heart Radio</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink tag={RRNavLink} className=\"nav-link\" to=\"/relays\">Relay Control</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink tag={RRNavLink} className=\"nav-link\" to=\"/settings\">Settings</NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                    </Collapse>\r\n                </div>\r\n            </Navbar>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Header;","//Restart Pi, Shutdown Pi, Restart server, Mute all\r\nimport React from 'react';\r\n\r\nfunction Footer(props) {\r\n    return(\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    <a onClick=\"\" >Mute All</a> | <a onClick=\"\">Restart Server</a>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Footer;","import { hostname} from 'os';\r\n\r\nexport const SSEUrl = `http://${hostname()}:3000/sse`;\r\nexport const apiBaseUrl = `http://${hostname()}:3000/api`;\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\nimport Select from 'react-select';\r\nimport { apiBaseUrl } from '../helpers/baseUrls';\r\n\r\nexport const StationSelect = ({stationList, currentStationName, playerRunning}) => {\r\n\r\n    const stationsOptions = () => (stationList.map(station => {\r\n        return {\r\n            value: station.stationId,\r\n            label: station.stationName\r\n        }\r\n    }));\r\n\r\n    const getCurrentStation = () => {\r\n        if (currentStationName && playerRunning) {\r\n            return stationsOptions().find(station => station.label === currentStationName);\r\n        }\r\n    }\r\n\r\n    const onStationChange = (event) => {\r\n        const stationId = event.value;\r\n        if (stationId) {\r\n            const command = '/pandora?command=SETSTATION&stationId=' + stationId.toString();\r\n            console.log(\"Execute Pianobar command: \" + command);\r\n            fetch(apiBaseUrl + command, {method: 'post'})\r\n                .then(response => console.log(response), error => console.log(error));\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Col md=\"5 m-auto\">\r\n            <Select\r\n                value={getCurrentStation()}\r\n                options={stationsOptions()}\r\n                onChange={(event) => onStationChange(event)}\r\n            />\r\n        </Col>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Col, Media, Button, Progress } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as fas from '@fortawesome/free-solid-svg-icons';\r\nimport * as far from '@fortawesome/free-regular-svg-icons';\r\n\r\nimport { apiBaseUrl } from '../helpers/baseUrls';\r\n\r\nexport const SongControls = (props) => {\r\n\tconst {currentSong, playerRunning, isPaused} = props;\r\n\tconst buttonList = [\r\n\t\t{\r\n\t\t\tid: 'love',\r\n\t\t\tclass: 'float-left',\r\n\t\t\tcommand: '/pandora?command=LOVE',\r\n\t\t\ticon: currentSong.currentSong.rating === \"1\" ? fas.faThumbsUp : far.faThumbsUp\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'pauseplay',\r\n\t\t\tclass: '',\r\n\t\t\tcommand: '/player?command=PLAYPAUSE',\r\n\t\t\ticon: isPaused ? fas.faPlay : fas.faPause\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'next',\r\n\t\t\tclass: '',\r\n\t\t\tcommand: '/player?command=NEXT',\r\n\t\t\ticon: fas.faFastForward\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'stop',\r\n\t\t\tclass: '',\r\n\t\t\tcommand: '/player?command=STOPPLAYER',\r\n\t\t\ticon: fas.faStop\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'volumedown',\r\n\t\t\tclass: '',\r\n\t\t\tcommand: '/player?command=VOLUME_DOWN',\r\n\t\t\ticon: fas.faVolumeDown\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'volumeup',\r\n\t\t\tclass: '',\r\n\t\t\tcommand: '/player?command=VOLUME_UP',\r\n\t\t\ticon: fas.faVolumeUp\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'hate',\r\n\t\t\tclass: 'float-right',\r\n\t\t\tcommand: '/pandora?command=HATE',\r\n\t\t\ticon: far.faThumbsDown\r\n\t\t}\r\n\t];\r\n\tconst songPlayed = Math.round(100*parseInt(currentSong.currentSong.songPlayed)/parseInt(currentSong.currentSong.songDuration));\r\n\tconsole.log(songPlayed);\r\n\t\r\n\tconst handleClick = (command) => {\r\n\t\tconsole.log(\"Execute Pianobar command: \" + command);\r\n\t\tfetch(apiBaseUrl + command, {method: 'post'})\r\n\t\t\t.then(response => console.log(response), error => console.log(error));\r\n\t}\r\n\r\n    return(\r\n        <Col md=\"6 m-auto\" className=\"song-controls\">\r\n            <Media src={currentSong.currentSong.coverArt} alt={currentSong.currentSong.title} className=\"col-12 m-auto\"/>\r\n            <Media>\r\n                <Media bottom body>\r\n                    <Media heading>{currentSong.currentSong.title}</Media>\r\n                    {currentSong.currentSong.artist}\r\n                </Media>\r\n            </Media>\r\n            <br />\r\n            <Progress value={songPlayed} />\r\n\t\t\t<br />\r\n\t\t\t{buttonList.map(songButton => (\r\n\t\t\t\t<Button\r\n\t\t\t\t\tid={songButton.id}\r\n\t\t\t\t\tkey={songButton.id}\r\n\t\t\t\t\tclassName={songButton.class}\r\n\t\t\t\t\tdisabled={!playerRunning}\r\n\t\t\t\t\tcolor='light'\r\n\t\t\t\t\tonClick={() => handleClick(songButton.command)}\r\n\t\t\t\t\t><FontAwesomeIcon icon={songButton.icon} /></Button>\r\n\t\t\t))}\r\n        </Col>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport const Home = (props) => {\r\n    return (\r\n        <>\r\n            <p>Welcome home!</p>\r\n        </>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\n\r\nimport Header from './HeaderComponent';\r\nimport Footer from './FooterComponent';\r\nimport { StationSelect } from './StationsComponent';\r\nimport { SongControls } from './SongComponent';\r\nimport { Home } from './HomeComponent';\r\nimport { apiBaseUrl, SSEUrl } from '../helpers/baseUrls';\r\n\r\nexport const Main = (props) => {\r\n    const [isNavOpen, setIsNavOpen] = useState(false);\r\n    const [eventSource, setEventSource] = useState();\r\n    const toggleNav = () => {\r\n        setIsNavOpen(!isNavOpen);\r\n    }\r\n\r\n    const eventHandlers = {\r\n        'pandora': (e) => props.updatePandora(e.data),\r\n        'player': (e) => props.updatePlayer(e.data)\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!eventSource) {\r\n            setEventSource(new EventSource(SSEUrl));\r\n        } else {\r\n            eventSource.onopen = () => {\r\n                console.log('Source opened!');\r\n            }\r\n\r\n            eventSource.onerror = () => {\r\n                console.log(eventSource.readyState);\r\n            }\r\n\r\n            Object.keys(eventHandlers).forEach((eventType) => {\r\n                eventSource.addEventListener(eventType, (e) => {\r\n                    eventHandlers[eventType](e);\r\n                });\r\n            });\r\n        }\r\n    }, [eventSource]);\r\n\r\n    useEffect(() => {\r\n        return () => {if (eventSource) {eventSource.close()}};\r\n    }, []);\r\n\r\n    const startPlayer = () => {\r\n        fetch(apiBaseUrl + '/player?command=STARTPLAYER', { method: 'post' })\r\n            .then(response => console.log(response), error => console.log(error));\r\n    };\r\n\r\n    const Pandora = () => {\r\n        if (props.player.playerRunning && !props.player.isLoading && !props.pandora.isLoading) {\r\n            return (\r\n                <>\r\n                    <StationSelect\r\n                        stationList={props.pandora.stationList}\r\n                        currentStationName={props.pandora.currentSong.currentSong.stationName}\r\n                        playerRunning={props.player.playerRunning}\r\n                    />\r\n                    <br />\r\n                    <SongControls\r\n                        currentSong={props.pandora.currentSong}\r\n                        playerRunning={props.player.playerRunning}\r\n                        isPaused={props.player.isPaused}\r\n                    />\r\n                </>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Button\r\n                    id=\"startPlayer\"\r\n                    key=\"startPlayer\"\r\n                    color='light'\r\n                    onClick={() => startPlayer()}\r\n                >Start Player</Button>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header isNavOpen={isNavOpen} toggleNav={toggleNav} />\r\n            <br />\r\n            <Switch>\r\n                <Route path=\"/home\" component={Home} />\r\n                <Route exact path=\"/pandora\" component={Pandora} />\r\n                <Redirect to=\"/home\" />\r\n            </Switch>\r\n            <br />\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n","import * as ActionTypes from './ActionTypes';\r\n\r\nexport const updatePlayer = (newPlayer) => (dispatch) => {\r\n    dispatch(addPlayer(JSON.parse(newPlayer)));\r\n};\r\n\r\nexport const updatePandora = (newPandora) => (dispatch) => {\r\n    dispatch(addPandora(JSON.parse(newPandora)));\r\n};\r\n\r\nexport const addPlayer = (player) => ({\r\n    type: ActionTypes.ADD_PLAYER,\r\n    payload: player\r\n});\r\n\r\nexport const addPandora = (pandora) => ({\r\n    type: ActionTypes.ADD_PANDORA,\r\n    payload: pandora\r\n});\r\n","export const ADD_PANDORA = 'ADD_PANDORA';\r\nexport const ADD_PLAYER = 'ADD_PLAYER';\r\n","import { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport { Main } from './MainComponent'\r\nimport * as ActionCreators from '../redux/ActionCreators';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        pandora: state.pandora,\r\n        player: state.player\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    updatePandora: (newPandora) => {dispatch(ActionCreators.updatePandora(newPandora))},\r\n    updatePlayer: (newPlayer) => {dispatch(ActionCreators.updatePlayer(newPlayer))}\r\n});\r\n\r\nexport const getMainConnector = () => withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));\r\n\r\nexport const MainConnector = getMainConnector();","import * as ActionTypes from './ActionTypes';\r\n\r\nconst emptyState = {\r\n    isLoading: true,\r\n    currentSong: {\r\n        isLoading: true,\r\n        currentSong: {}\r\n    },\r\n    stationList: [],\r\n    songHistory: []\r\n};\r\n\r\nexport const Pandora = (state = emptyState, action) => {\r\n\r\n    const actionMap = {\r\n        [ActionTypes.ADD_PANDORA]: { ...state, ...action.payload, currentSong: {...state.currentSong, ...(action.payload ? action.payload.currentSong : {}), isLoading: false}, isLoading: false }\r\n    };\r\n\r\n    return Object.keys(actionMap).includes(action.type) ? actionMap[action.type] : state;\r\n}","import * as ActionTypes from './ActionTypes';\r\n\r\nconst emptyState = {\r\n    isLoading: true,\r\n    isPaused: false,\r\n    playerRunning: false\r\n};\r\n\r\nexport const Player = (state = emptyState, action) => {\r\n\r\n    const actionMap = {\r\n        [ActionTypes.ADD_PLAYER]: { ...state, ...action.payload, isLoading: false }\r\n    };\r\n\r\n    return Object.keys(actionMap).includes(action.type) ? actionMap[action.type] : state;\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { MainConnector } from './components/MainConnector';\r\nimport './App.css';\r\nimport { ConfigureStore } from './redux/configureStore';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Provider store={ConfigureStore()}>\r\n      <BrowserRouter>\r\n        <div className=\"App\">\r\n          <MainConnector />\r\n        </div>\r\n      </BrowserRouter>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { Pandora } from './pandora';\r\nimport { Player } from './player';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\n\r\nexport const ConfigureStore = () => {\r\n    const store = createStore(\r\n        combineReducers({\r\n          pandora: Pandora,\r\n          player: Player\r\n        }),\r\n        applyMiddleware(thunk, logger)\r\n    );\r\n\r\n    return store;\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}