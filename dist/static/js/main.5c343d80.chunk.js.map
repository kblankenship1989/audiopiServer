{"version":3,"sources":["assets/Raspi.png","components/HeaderComponent.js","components/FooterComponent.js","helpers/baseUrls.js","components/StationsComponent.js","components/SongComponent.js","components/HomeComponent.js","components/MainComponent.js","redux/ActionCreators.js","redux/ActionTypes.js","components/MainConnector.js","redux/pandora.js","redux/player.js","App.js","redux/configureStore.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","Fragment","Navbar","dark","expand","className","NavbarBrand","href","target","tag","RRNavLink","src","require","width","height","alt","NavbarToggler","onClick","toggleNav","Collapse","isOpen","isNavOpen","navbar","Nav","NavItem","NavLink","to","Footer","SSEUrl","concat","hostname","apiBaseUrl","StationSelect","_ref","stationList","currentStationName","playerRunning","stationsOptions","map","station","value","stationId","label","stationName","Col","md","react_select_browser_esm","find","getCurrentStation","options","onChange","event","command","toString","console","log","fetch","method","then","response","error","onStationChange","SongControls","currentSong","isPaused","buttonList","id","class","icon","rating","fas","far","songPlayed","Math","round","parseInt","songDuration","Media","coverArt","title","bottom","body","heading","artist","Progress","songButton","Button","key","disabled","color","index_es","Home","Main","_useState2","_slicedToArray","useState","setIsNavOpen","_useState4","eventSource","setEventSource","eventHandlers","pandora","e","updatePandora","data","player","updatePlayer","useEffect","onopen","onerror","readyState","Object","keys","forEach","eventType","addEventListener","EventSource","close","HeaderComponent","react_router","path","component","exact","isLoading","StationsComponent_StationSelect","SongComponent_SongControls","FooterComponent","addPlayer","type","payload","addPandora","mapStateToProps","state","mapDispatchToProps","dispatch","newPandora","JSON","parse","ActionCreators","newPlayer","MainConnector","withRouter","connect","emptyState","songHistory","Pandora","arguments","length","undefined","action","actionMap","_defineProperty","_objectSpread","includes","Player","player_defineProperty","player_objectSpread","App","es","store","createStore","combineReducers","applyMiddleware","thunk","logger","react_router_dom","Boolean","window","location","match","ReactDOM","render","client_src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c343d80.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Raspi.8814236b.png\";","import React from 'react';\nimport {Nav,NavItem,NavLink,Navbar,NavbarToggler,NavbarBrand,Collapse} from 'reactstrap';\nimport {NavLink as RRNavLink} from 'react-router-dom';\n\nfunction Header(props) {\n    return(\n        <>\n            <Navbar dark expand=\"md\">\n                <div className=\"container\">\n                    <NavbarBrand className=\"mr-auto\" href=\"/\" target=\"_blank\" tag={RRNavLink}>\n                        <img src={require('../assets/Raspi.png')} width=\"40\" height=\"35\" alt=\"\" /> \n                    </NavbarBrand>\n                    <NavbarToggler onClick={props.toggleNav} />\n                    <Collapse isOpen={props.isNavOpen} navbar>\n                        <Nav navbar>\n                            <NavItem>\n                                <NavLink tag={RRNavLink} className=\"nav-link\" to=\"/home\">Home</NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink tag={RRNavLink} className=\"nav-link\" to=\"/pandora\">Pandora</NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink tag={RRNavLink} className=\"nav-link\" to=\"/iheartradio\">I-Heart Radio</NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink tag={RRNavLink} className=\"nav-link\" to=\"/relays\">Relay Control</NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink tag={RRNavLink} className=\"nav-link\" to=\"/settings\">Settings</NavLink>\n                            </NavItem>\n                        </Nav>\n                    </Collapse>\n                </div>\n            </Navbar>\n        </>\n    );\n}\n\nexport default Header;","//Restart Pi, Shutdown Pi, Restart server, Mute all\nimport React from 'react';\n\nfunction Footer(props) {\n    return(\n        <>\n            <div className=\"container\">\n                <div className=\"row justify-content-center\">\n                    <a onClick=\"\" >Mute All</a> | <a onClick=\"\">Restart Server</a>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Footer;","import { hostname} from 'os';\n\nexport const SSEUrl = `http://${hostname()}:3000/sse`;\nexport const apiBaseUrl = `http://${hostname()}:3000/api`;\n","import React from 'react';\nimport { Col } from 'reactstrap';\nimport Select from 'react-select';\nimport { apiBaseUrl } from '../helpers/baseUrls';\n\nexport const StationSelect = ({stationList, currentStationName, playerRunning}) => {\n\n    const stationsOptions = () => (stationList.map(station => {\n        return {\n            value: station.stationId,\n            label: station.stationName\n        }\n    }));\n\n    const getCurrentStation = () => {\n        if (currentStationName && playerRunning) {\n            return stationsOptions().find(station => station.label === currentStationName);\n        }\n    }\n\n    const onStationChange = (event) => {\n        const stationId = event.value;\n        if (stationId) {\n            const command = '/pandora?command=SETSTATION&stationId=' + stationId.toString();\n            console.log(\"Execute Pianobar command: \" + command);\n            fetch(apiBaseUrl + command, {method: 'post'})\n                .then(response => console.log(response), error => console.log(error));\n        }\n    }\n\n    return(\n        <Col md=\"5 m-auto\">\n            <Select\n                value={getCurrentStation()}\n                options={stationsOptions()}\n                onChange={(event) => onStationChange(event)}\n            />\n        </Col>\n    );\n};\n","import React from 'react';\nimport { Col, Media, Button, Progress } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as fas from '@fortawesome/free-solid-svg-icons';\nimport * as far from '@fortawesome/free-regular-svg-icons';\n\nimport { apiBaseUrl } from '../helpers/baseUrls';\n\nexport const SongControls = (props) => {\n\tconst {currentSong, playerRunning, isPaused} = props;\n\tconst buttonList = [\n\t\t{\n\t\t\tid: 'love',\n\t\t\tclass: 'float-left',\n\t\t\tcommand: '/pandora?command=LOVE',\n\t\t\ticon: currentSong.currentSong.rating === \"1\" ? fas.faThumbsUp : far.faThumbsUp\n\t\t},\n\t\t{\n\t\t\tid: 'pauseplay',\n\t\t\tclass: '',\n\t\t\tcommand: '/player?command=PLAYPAUSE',\n\t\t\ticon: isPaused ? fas.faPlay : fas.faPause\n\t\t},\n\t\t{\n\t\t\tid: 'next',\n\t\t\tclass: '',\n\t\t\tcommand: '/player?command=NEXT',\n\t\t\ticon: fas.faFastForward\n\t\t},\n\t\t{\n\t\t\tid: 'stop',\n\t\t\tclass: '',\n\t\t\tcommand: '/player?command=STOPPLAYER',\n\t\t\ticon: fas.faStop\n\t\t},\n\t\t{\n\t\t\tid: 'volumedown',\n\t\t\tclass: '',\n\t\t\tcommand: '/player?command=VOLUME_DOWN',\n\t\t\ticon: fas.faVolumeDown\n\t\t},\n\t\t{\n\t\t\tid: 'volumeup',\n\t\t\tclass: '',\n\t\t\tcommand: '/player?command=VOLUME_UP',\n\t\t\ticon: fas.faVolumeUp\n\t\t},\n\t\t{\n\t\t\tid: 'hate',\n\t\t\tclass: 'float-right',\n\t\t\tcommand: '/pandora?command=HATE',\n\t\t\ticon: far.faThumbsDown\n\t\t}\n\t];\n\tconst songPlayed = Math.round(100*parseInt(currentSong.currentSong.songPlayed)/parseInt(currentSong.currentSong.songDuration));\n\tconsole.log(songPlayed);\n\t\n\tconst handleClick = (command) => {\n\t\tconsole.log(\"Execute Pianobar command: \" + command);\n\t\tfetch(apiBaseUrl + command, {method: 'post'})\n\t\t\t.then(response => console.log(response), error => console.log(error));\n\t}\n\n    return(\n        <Col md=\"6 m-auto\" className=\"song-controls\">\n            <Media src={currentSong.currentSong.coverArt} alt={currentSong.currentSong.title} className=\"col-12 m-auto\"/>\n            <Media>\n                <Media bottom body>\n                    <Media heading>{currentSong.currentSong.title}</Media>\n                    {currentSong.currentSong.artist}\n                </Media>\n            </Media>\n            <br />\n            <Progress value={songPlayed} />\n\t\t\t<br />\n\t\t\t{buttonList.map(songButton => (\n\t\t\t\t<Button\n\t\t\t\t\tid={songButton.id}\n\t\t\t\t\tkey={songButton.id}\n\t\t\t\t\tclassName={songButton.class}\n\t\t\t\t\tdisabled={!playerRunning}\n\t\t\t\t\tcolor='light'\n\t\t\t\t\tonClick={() => handleClick(songButton.command)}\n\t\t\t\t\t><FontAwesomeIcon icon={songButton.icon} /></Button>\n\t\t\t))}\n        </Col>\n    );\n}\n","import React from 'react';\n\nexport const Home = (props) => {\n    return (\n        <>\n            <p>Welcome home!</p>\n        </>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Button } from 'reactstrap';\nimport { Switch, Route, Redirect } from 'react-router-dom';\n\nimport Header from './HeaderComponent';\nimport Footer from './FooterComponent';\nimport { StationSelect } from './StationsComponent';\nimport { SongControls } from './SongComponent';\nimport { Home } from './HomeComponent';\nimport { apiBaseUrl, SSEUrl } from '../helpers/baseUrls';\n\nexport const Main = (props) => {\n    const [isNavOpen, setIsNavOpen] = useState(false);\n    const [eventSource, setEventSource] = useState();\n    const toggleNav = () => {\n        setIsNavOpen(!isNavOpen);\n    }\n\n    const eventHandlers = {\n        'pandora': (e) => props.updatePandora(e.data),\n        'player': (e) => props.updatePlayer(e.data)\n    };\n\n    useEffect(() => {\n        if (!eventSource) {\n            setEventSource(new EventSource(SSEUrl));\n        } else {\n            eventSource.onopen = () => {\n                console.log('Source opened!');\n            }\n\n            eventSource.onerror = () => {\n                console.log(eventSource.readyState);\n            }\n\n            Object.keys(eventHandlers).forEach((eventType) => {\n                eventSource.addEventListener(eventType, (e) => {\n                    eventHandlers[eventType](e);\n                });\n            });\n        }\n    }, [eventSource]);\n\n    useEffect(() => {\n        return () => {if (eventSource) {eventSource.close()}};\n    }, []);\n\n    const startPlayer = () => {\n        fetch(apiBaseUrl + '/player?command=STARTPLAYER', { method: 'post' })\n            .then(response => console.log(response), error => console.log(error));\n    };\n\n    const Pandora = () => {\n        if (props.player.playerRunning && !props.player.isLoading && !props.pandora.isLoading) {\n            return (\n                <>\n                    <StationSelect\n                        stationList={props.pandora.stationList}\n                        currentStationName={props.pandora.currentSong.currentSong.stationName}\n                        playerRunning={props.player.playerRunning}\n                    />\n                    <br />\n                    <SongControls\n                        currentSong={props.pandora.currentSong}\n                        playerRunning={props.player.playerRunning}\n                        isPaused={props.player.isPaused}\n                    />\n                </>\n            );\n        }\n\n        return (\n            <>\n                <Button\n                    id=\"startPlayer\"\n                    key=\"startPlayer\"\n                    color='light'\n                    onClick={() => startPlayer()}\n                >Start Player</Button>\n            </>\n        );\n    }\n\n    return (\n        <div>\n            <Header isNavOpen={isNavOpen} toggleNav={toggleNav} />\n            <br />\n            <Switch>\n                <Route path=\"/home\" component={Home} />\n                <Route exact path=\"/pandora\" component={Pandora} />\n                <Redirect to=\"/home\" />\n            </Switch>\n            <br />\n            <Footer />\n        </div>\n    );\n}\n","import * as ActionTypes from './ActionTypes';\n\nexport const updatePlayer = (newPlayer) => (dispatch) => {\n    dispatch(addPlayer(JSON.parse(newPlayer)));\n};\n\nexport const updatePandora = (newPandora) => (dispatch) => {\n    dispatch(addPandora(JSON.parse(newPandora)));\n};\n\nexport const addPlayer = (player) => ({\n    type: ActionTypes.ADD_PLAYER,\n    payload: player\n});\n\nexport const addPandora = (pandora) => ({\n    type: ActionTypes.ADD_PANDORA,\n    payload: pandora\n});\n","export const ADD_PANDORA = 'ADD_PANDORA';\nexport const ADD_PLAYER = 'ADD_PLAYER';\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { Main } from './MainComponent'\nimport * as ActionCreators from '../redux/ActionCreators';\n\nconst mapStateToProps = state => {\n    return {\n        pandora: state.pandora,\n        player: state.player\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    updatePandora: (newPandora) => {dispatch(ActionCreators.updatePandora(newPandora))},\n    updatePlayer: (newPlayer) => {dispatch(ActionCreators.updatePlayer(newPlayer))}\n});\n\nexport const getMainConnector = () => withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));\n\nexport const MainConnector = getMainConnector();","import * as ActionTypes from './ActionTypes';\n\nconst emptyState = {\n    isLoading: true,\n    currentSong: {\n        isLoading: true,\n        currentSong: {}\n    },\n    stationList: [],\n    songHistory: []\n};\n\nexport const Pandora = (state = emptyState, action) => {\n\n    const actionMap = {\n        [ActionTypes.ADD_PANDORA]: { ...state, ...action.payload, currentSong: {...state.currentSong, ...(action.payload ? action.payload.currentSong : {}), isLoading: false}, isLoading: false }\n    };\n\n    return Object.keys(actionMap).includes(action.type) ? actionMap[action.type] : state;\n}","import * as ActionTypes from './ActionTypes';\n\nconst emptyState = {\n    isLoading: true,\n    isPaused: false,\n    playerRunning: false\n};\n\nexport const Player = (state = emptyState, action) => {\n\n    const actionMap = {\n        [ActionTypes.ADD_PLAYER]: { ...state, ...action.payload, isLoading: false }\n    };\n\n    return Object.keys(actionMap).includes(action.type) ? actionMap[action.type] : state;\n}","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport { MainConnector } from './components/MainConnector';\nimport './App.css';\nimport { ConfigureStore } from './redux/configureStore';\n\nconst App = () => {\n  return (\n    <Provider store={ConfigureStore()}>\n      <BrowserRouter>\n        <div className=\"App\">\n          <MainConnector />\n        </div>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Pandora } from './pandora';\nimport { Player } from './player';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\nexport const ConfigureStore = () => {\n    const store = createStore(\n        combineReducers({\n          pandora: Pandora,\n          player: Player\n        }),\n        applyMiddleware(thunk, logger)\n    );\n\n    return store;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}